// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['/bower_components/inputhandler/dist/InputHandler.js', '/bower_components/imagemanager/dist/ImageManager.js'], function(InputHandler, ImageManager) {
    var Puzzle;
    return Puzzle = (function() {
      function Puzzle(parentId) {
        this.parentId = parentId;
        this.showThumbnail = __bind(this.showThumbnail, this);
        this.down = __bind(this.down, this);
        this.up = __bind(this.up, this);
        this.move = __bind(this.move, this);
        this.draw = __bind(this.draw, this);
        this.resize = __bind(this.resize, this);
        this.init = __bind(this.init, this);
        this.outlineWidth = 1;
        this.outlineColor = '#F5FE4B';
        this.active = -1;
        this.imagePath = null;
        this.parent = document.getElementById(this.parentId);
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.input = new InputHandler(this.canvas);
        this.im = new ImageManager;
        this._initEvents();
      }

      Puzzle.prototype.init = function() {
        if (!this.im.get(this.imagePath)) {
          this.im.addImage(this.imagePath, this.imagePath);
          return this.im.load(this.init);
        }
        this._initMap();
        return this._initFullScreen();
      };

      Puzzle.prototype.setGrid = function(grid) {
        return this.grid = grid;
      };

      Puzzle.prototype.setImagePath = function(path) {
        return this.imagePath = path;
      };

      Puzzle.prototype.resize = function() {
        var height, width;
        width = this.parent.width || this.parent.clientWidth;
        height = this.parent.height || this.parent.clientHeight;
        this.canvas.width = this.canvas.height = Math.min(width, height);
        this.img = this._squareImage();
        this.setSize();
        return this.draw();
      };

      Puzzle.prototype.setSize = function() {
        this.size = Math.round(this.canvas.width / this.grid);
        return this.outlineWidth = Math.min(8, Math.round(this.size / 30));
      };

      Puzzle.prototype.draw = function() {
        var index, tile, _i, _len, _ref;
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        _ref = this.map;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          tile = _ref[index];
          this._drawTile(tile, index);
        }
        if (this.active > -1) {
          return this._drawTile(this.map[this.active], this.active, true);
        }
      };

      Puzzle.prototype.move = function(e) {
        this.actPos.x += e.deltaX;
        this.actPos.y += e.deltaY;
        return this.draw();
      };

      Puzzle.prototype.up = function(e) {
        var activeTile, drop;
        drop = this._getIndexByCoords(e);
        activeTile = this.map[this.active];
        this.map[this.active] = this.map[drop];
        this.map[drop] = activeTile;
        this.active = -1;
        this._resetActPos();
        this.draw();
        return this.checkWin();
      };

      Puzzle.prototype.down = function(e) {
        this.active = this._getIndexByCoords(e);
        return this._resetActPos();
      };

      Puzzle.prototype.showThumbnail = function() {
        var length, padding, pos;
        this.draw();
        this.ctx.fillStyle = "rgba(0, 0, 0, .5)";
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        padding = 4;
        pos = Math.round(this.canvas.width / padding);
        length = (padding - 2) * pos;
        this.ctx.drawImage(this.img, 0, 0, this.img.width, this.img.width, pos, pos, length, length);
        return this._strokeSquare(pos, pos, length);
      };

      Puzzle.prototype.checkWin = function() {
        var index, tile, win, _i, _len, _ref;
        win = true;
        _ref = this.map;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          tile = _ref[index];
          win = tile === index && win;
        }
        if (win) {
          return this.showCongratulation();
        }
      };

      Puzzle.prototype.showCongratulation = function() {
        return this.ctx.drawImage(this.img, 0, 0, this.canvas.width, this.canvas.height);
      };

      Puzzle.prototype._getIndexByCoords = function(e) {
        return Math.floor(e.y / this.size) * this.grid + Math.floor(e.x / this.size);
      };

      Puzzle.prototype._drawTile = function(tile, index, isActive) {
        var dist, getPos, src;
        if (isActive == null) {
          isActive = false;
        }
        if (index === this.active && !isActive) {
          return;
        }
        getPos = (function(_this) {
          return function(i) {
            return {
              x: (i % _this.grid) * _this.size,
              y: Math.floor(i / _this.grid) * _this.size
            };
          };
        })(this);
        dist = getPos(index);
        if (isActive) {
          dist.x += this.actPos.x;
          dist.y += this.actPos.y;
        }
        src = getPos(tile);
        this.ctx.drawImage(this.img, src.x, src.y, this.size, this.size, dist.x, dist.y, this.size, this.size);
        return this._strokeSquare(dist.x, dist.y, this.size);
      };

      Puzzle.prototype._strokeSquare = function(x, y, size) {
        this.ctx.beginPath();
        this.ctx.lineWidth = this.outlineWidth;
        this.ctx.moveTo(x, y);
        this.ctx.lineTo(x += size, y);
        this.ctx.lineTo(x, y += size);
        this.ctx.lineTo(x -= size, y);
        this.ctx.lineJoin = 'bevel';
        this.ctx.closePath();
        this.ctx.strokeStyle = this.outlineColor;
        return this.ctx.stroke();
      };

      Puzzle.prototype._initFullScreen = function() {
        this.parent.appendChild(this.canvas);
        window.addEventListener('resize', this.resize);
        return this.resize();
      };

      Puzzle.prototype._initEvents = function() {
        this.input.on('move', this.move);
        this.input.on('up', this.up);
        return this.input.on('down', this.down);
      };

      Puzzle.prototype._initMap = function() {
        var _i, _ref, _results;
        return this.map = this._shuffle((function() {
          _results = [];
          for (var _i = 0, _ref = Math.pow(this.grid, 2); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this));
      };

      Puzzle.prototype._shuffle = function(map) {
        var i, rand, randTile, _i, _ref;
        for (i = _i = _ref = map.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          rand = Math.floor(Math.random() * (i + 1));
          randTile = map[rand];
          map[rand] = map[i];
          map[i] = randTile;
        }
        return map;
      };

      Puzzle.prototype._squareImage = function() {
        var canvas, ctx, img, lenght;
        canvas = document.createElement('canvas');
        canvas.width = canvas.height = this.canvas.width;
        ctx = canvas.getContext('2d');
        img = this.im.get(this.imagePath);
        lenght = Math.min(img.width, img.height);
        ctx.drawImage(img, (img.width - lenght) / 2, (img.height - lenght) / 2, lenght, lenght, 0, 0, canvas.width, canvas.height);
        return this.img = canvas;
      };

      Puzzle.prototype._resetActPos = function() {
        return this.actPos = {
          x: 0,
          y: 0
        };
      };

      return Puzzle;

    })();
  });

}).call(this);
