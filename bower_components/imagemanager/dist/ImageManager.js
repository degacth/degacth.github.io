// Generated by CoffeeScript 1.7.1
(function() {
  define(function() {
    var ImageManager;
    return ImageManager = (function() {
      function ImageManager(_imageQueue, placeholderData) {
        this._imageQueue = _imageQueue != null ? _imageQueue : [];
        if (placeholderData == null) {
          placeholderData = null;
        }
        this._images = {};
        this._placeholder = null;
        if (placeholderData) {
          this._placeholder = new Image;
          this._placeholder.src = placeholderData;
        }
      }

      ImageManager.prototype.addImage = function(key, path) {
        return this._imageQueue.push({
          key: key,
          path: path
        });
      };

      ImageManager.prototype.load = function(onDone, onProgress) {
        var item, noop, _i, _len, _ref;
        noop = function() {};
        this.done = onDone != null ? onDone : onDone = noop;
        this.progress = onProgress != null ? onProgress : onProgress = noop;
        this.counter = {
          loaded: 0,
          total: this._imageQueue.length
        };
        _ref = this._imageQueue;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          this._loadItem(item);
        }
        return this._imageQueue = [];
      };

      ImageManager.prototype.get = function(key) {
        return this._images[key];
      };

      ImageManager.prototype._loadItem = function(item) {
        var img;
        img = new Image;
        img.onload = (function(_this) {
          return function() {
            _this._images[item.key] = img;
            return _this._onItemLoaded(item, true);
          };
        })(this);
        img.onerror = (function(_this) {
          return function() {
            _this._images[item.key] = _this._placeholder;
            return _this._onItemLoaded(item, false);
          };
        })(this);
        return img.src = item.path;
      };

      ImageManager.prototype._onItemLoaded = function(item, status) {
        this.counter.loaded++;
        this.progress(item, this.counter, status);
        if (this.counter.loaded === this.counter.total) {
          return this.done();
        }
      };

      return ImageManager;

    })();
  });

}).call(this);
