// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./InputHandlerBase.js'], function(InputHandlerBase) {
    var MouseInputHandler;
    return MouseInputHandler = (function(_super) {
      __extends(MouseInputHandler, _super);

      function MouseInputHandler(element) {
        this._onMouseOut = __bind(this._onMouseOut, this);
        this._onMoveDomEvent = __bind(this._onMoveDomEvent, this);
        this._onUpDomEvent = __bind(this._onUpDomEvent, this);
        this._onDownDomEvent = __bind(this._onDownDomEvent, this);
        MouseInputHandler.__super__.constructor.call(this, element);
        this._mouseDown = false;
        this._attachDomListeners();
      }

      MouseInputHandler.prototype._attachDomListeners = function() {
        this._element.addEventListener('mousedown', this._onDownDomEvent, false);
        this._element.addEventListener('mouseup', this._onUpDomEvent, false);
        this._element.addEventListener('mousemove', this._onMoveDomEvent);
        return this._element.addEventListener('mouseout', this._onMouseOut);
      };

      MouseInputHandler.prototype._onDownDomEvent = function(e) {
        this._mouseDown = true;
        return MouseInputHandler.__super__._onDownDomEvent.call(this, e);
      };

      MouseInputHandler.prototype._onUpDomEvent = function(e) {
        this._mouseDown = false;
        return MouseInputHandler.__super__._onUpDomEvent.call(this, e);
      };

      MouseInputHandler.prototype._onMoveDomEvent = function(e) {
        if (this._mouseDown) {
          return MouseInputHandler.__super__._onMoveDomEvent.call(this, e);
        }
      };

      MouseInputHandler.prototype._onMouseOut = function() {
        return this._mouseDown = false;
      };

      return MouseInputHandler;

    })(InputHandlerBase);
  });

}).call(this);
