// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./EventEmitter.js'], function(EventEmitter) {
    var InputHandlerBase;
    return InputHandlerBase = (function(_super) {
      __extends(InputHandlerBase, _super);

      function InputHandlerBase(_element) {
        this._element = _element;
        InputHandlerBase.__super__.constructor.apply(this, arguments);
        this._lastMoveCoordinates = null;
        this._moving = false;
        this._moveThreshold = 10;
        this._stopDomEvents = true;
      }

      InputHandlerBase.prototype.setMoveThreshold = function(value) {
        return this._moveThreshold = value;
      };

      InputHandlerBase.prototype.setStopDomEvents = function(value) {
        return this._stopDomEvents = value;
      };

      InputHandlerBase.prototype.getMoveThreshold = function() {
        return this._moveThreshold;
      };

      InputHandlerBase.prototype.getStopDomEvents = function() {
        return this._stopDomEvents;
      };

      InputHandlerBase.prototype._onDownDomEvent = function(e) {
        var coords;
        coords = this._lastMoveCoordinates = this._getInputCoordinates(e);
        this.emit('down', {
          x: coords.x,
          y: coords.y,
          domEvent: e
        });
        return this._stopEventIfRequired(e);
      };

      InputHandlerBase.prototype._onUpDomEvent = function(e) {
        var coords;
        coords = this._getInputCoordinates(e);
        this.emit('up', {
          x: coords.x,
          y: coords.y,
          moved: this._moving,
          domEvent: e
        });
        return this._moving = false;
      };

      InputHandlerBase.prototype._onMoveDomEvent = function(e) {
        var coords, deltaX, deltaY;
        coords = this._getInputCoordinates(e);
        deltaX = coords.x - this._lastMoveCoordinates.x;
        deltaY = coords.y - this._lastMoveCoordinates.y;
        if (!this._moving && Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2)) > this._moveThreshold) {
          this._moving = true;
        }
        if (this._moving) {
          this.emit('move', {
            x: coords.x,
            y: coords.y,
            deltaX: deltaX,
            deltaY: deltaY,
            domEvent: e
          });
          this._lastMoveCoordinates = coords;
        }
        return this._stopEventIfRequired(e);
      };

      InputHandlerBase.prototype._stopEventIfRequired = function(e) {
        if (this._stopDomEvents) {
          e.stopPropagation();
          return e.preventDefault();
        }
      };

      InputHandlerBase.prototype._getInputCoordinates = function(e) {
        var coords;
        coords = e.targetTouches ? e.targetTouches[0] : e;
        return {
          x: (coords.pageX || coords.clientX + document.body.scrollLeft) - this._element.offsetLeft,
          y: (coords.pageY || coords.clientY + document.body.scrollTop) - this._element.offsetTop
        };
      };

      return InputHandlerBase;

    })(EventEmitter);
  });

}).call(this);
